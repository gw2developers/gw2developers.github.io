{"title":"Powershell and API's","pubDate":"2013-05-23T06:29:39.000Z","guid":"http://forum-en.guildwars2.com/forum/community/api/Powershell-and-API-s","comments":[{"pubDate":"2013-05-24T09:26:15.000Z","guid":"http://forum-en.guildwars2.com/forum/community/api/Powershell-and-API-s/2083647","author":"Doenerbude.9451","body":"\n<p>I have made similar.<br>\nSince I have no idea of Java/PHP in conjunction with json, I let PowerShell call the API and write anything to the database. A small table simply shows the contents of the database. Is not live, but better than nothing: D</p>\n<p>Script below<br>\nLet someone find something useful<img src=\"/include/images/smilies/smile.png\"></p>\n<p>##MySQL<br>\n$db_host = ‘host’<br>\n$db_name = ‘db-name’<br>\n$db_user = ‘db-user’<br>\n$db_pass = ‘db-pass’<br>\n$db_table = ‘db-table’</p>\n<p>##Vars<br>\n$lang = ‘de’</p>\n<p>##MySQL-Connect<br>\n[void][system.reflection.Assembly]::LoadFrom(“C:\\Program Files (x86)\\MySQL\\MySQL Connector Net 6.5.4\\Assemblies\\v4.0\\MySQL.Data.dll”)<br>\n$dbconnect = New-Object MySql.Data.MySqlClient.MySqlConnection<br>\n$dbconnect.ConnectionString = “server=$db_host;user id=$db_user;password=$db_pass;database=$db_name;pooling=false”<br>\n$dbconnect.Open()</p>\n<p>$sql = New-Object MySql.Data.MySqlClient.MySqlCommand<br>\n$sql.Connection = $dbconnect</p>\n<p>##World Events for 2206<br>\n$get = Invoke-WebRequest “<a href=\"https://api.guildwars2.com/v1/events.json?world_id=2206\">https://api.guildwars2.com/v1/events.json?world_id=2206</a>”<br>\n$get = $get | ConvertFrom-Json</p>\n<p>for($i = 0; $i -lt $get.events.count;$i++) {<br>\n$map_id = $get.events.map_id[$i]<br>\n$event_id = $get.events.event_id[$i]<br>\n$status = $get.events.state[$i]<br>\n$sql.CommandText = “INSERT INTO $db_table (map_id, event_id, status) values (‘$map_id’, ‘$event_id’, ‘$status’) ON DUPLICATE KEY UPDATE status=‘$status’”<br>\n$sql.ExecuteNonQuery()<br>\n}</p>\n<p>##Event-Names (You have to do this once!)<br>\n$get = Invoke-WebRequest “<a href=\"https://api.guildwars2.com/v1/event_names.json?lang=$lang\">https://api.guildwars2.com/v1/event_names.json?lang=$lang</a>”<br>\n$get = $get.Content | ConvertFrom-Json</p>\n<p>for($i = 0; $i -lt $get.events.count;$i++) {<br>\n$event_id = $get.id[$i]<br>\n$event_name = $get.name[$i]<br>\n$sql.CommandText = “UPDATE $db_table SET `event_name` = ‘$event_name’ WHERE `event_id` = ‘$event_id’”<br>\n$sql.ExecuteNonQuery()<br>\n}</p>\n<p>##Map-Names (You have to do this once!)<br>\n$get = Invoke-WebRequest “<a href=\"https://api.guildwars2.com/v1/map_names.json?lang=$lang\">https://api.guildwars2.com/v1/map_names.json?lang=$lang</a>”<br>\n$get = $get.Content | ConvertFrom-Json</p>\n<p>for($i = 0; $i -lt $get.events.count;$i++) {<br>\n$map_id = $get.id[$i]<br>\n$map_name = $get.name[$i]<br>\n$sql.CommandText = “UPDATE $db_table SET `map_name` = ‘$map_name’ WHERE `map_id` = ‘$map_id’”<br>\n$sql.ExecuteNonQuery()<br>\n}</p>\n<p>$dbconnect.Close()</p>","arenanet":false},{"pubDate":"2013-05-23T23:39:45.000Z","guid":"http://forum-en.guildwars2.com/forum/community/api/Powershell-and-API-s/2081464","author":"poke.3712","body":"\n<p>TIL about Invoke-RestMethod. That’s pretty cool, thanks for sharing!</p>","arenanet":false},{"pubDate":"2013-05-23T06:29:39.000Z","guid":"http://forum-en.guildwars2.com/forum/community/api/Powershell-and-API-s/2077005","author":"Makani Eldrinn.5638","body":"\n<p>So first of all I should probably say that I suck at web development and have no desire to build any web tools with the api’s.  I did notice though that Powershell has the ability to read the api’s with the Invoke-RestMethod cmdlet.  I figured I could put this to use for myself.  I’ve been trying to get my last few poi’s and vistas in wvw for a while now, but I’m not in wvw constantly so I miss opportunity’s to get to those poi’s.  I know mos.millenum.org has live maps now but i’m not looking at those all the time either.  What I have done is made a powershell script that will automatically poll the api on a regular interval and notify me with a popup when the objective has changed to my server’s color, here’s the script:<br>\n$url = “<a href=\"https://api.guildwars2.com/v1/wvw/match_details.json?match_id=1-5\">https://api.guildwars2.com/v1/wvw/match_details.json?match_id=1-5</a>”<br>\n$team = “Green”</p>\n<p>do {<br>\n    <br>\n    $result = Invoke-RestMethod $url<br>\n    $objectives = $result.maps.objectives</p><pre><code>$objective1 = $objectives.item(\"6\")[0].owner</code></pre>    “Longview is $objective1”<br>\n    sleep 300<br>\n}<br>\nwhile ( $objective1 -ne $team )<p></p>\n<p>[System.Windows.Forms.MessageBox]::Show(“Longview is Green”,“Move it”,“OK”,“Hand”)</p>\n<p>In the example I was monitoring the Longview tower on the red boarderlands.  I know it’s not much but hopefully someone else can use this information for other useful things in the future.</p>","arenanet":false}]}