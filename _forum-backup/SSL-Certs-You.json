{"title":"SSL Certs & You","pubDate":"2013-05-21T19:23:53.000Z","guid":"http://forum-en.guildwars2.com/forum/community/api/SSL-Certs-You","comments":[{"pubDate":"2013-05-21T19:28:48.000Z","guid":"http://forum-en.guildwars2.com/forum/community/api/SSL-Certs-You/2069143","author":"Cliff Spradlin.3512","body":"\n<p>Nice summary!</p>\n<p>I’m also really interested in DANE / RFC 6698 because it reduces the trust required to just the domain registrar, who you’re already having to trust to return valid DNS results.</p>","arenanet":true},{"pubDate":"2013-05-21T19:23:53.000Z","guid":"http://forum-en.guildwars2.com/forum/community/api/SSL-Certs-You/2069115","author":"Killer Rhino.6794","body":"\n<p><strong>Hello, world</strong></p>\n<p>So, we’re all really excited for the GW2 APIs to be up. As a gesture of my gratitude to the devs, I’d like to share some technical points to consider when working with with ’dem shiny new endpoints.</p>\n<p><em>Note: There is a lot more to Internet security that is outside the purpose of this post. For a really in-depth look into HTTPS, see <a href=\"http://developer.apple.com/library/ios/#technotes/tn2232/_index.html\">Apple’s TN2232</a></em></p>\n<p><strong>HTTPS vs. HTTP</strong></p>\n<p>At its very basic, HTTPS is your average HTTP protocol placed over a layer of encryption. Encryption is done through <a href=\"http://en.wikipedia.org/wiki/Transport_Layer_Security\">SSL/TLS</a>.</p>\n<p>When connecting to a server via HTTPS, the protocoal expects the server to eventually provide a <a href=\"http://en.wikipedia.org/wiki/Public_key_certificate\">public key certificate</a>. This certificate contains identity information, which can be evaluated by the client to verify that the server is really who it says it is.</p>\n<p><strong>Taking the server’s word for it</strong></p>\n<p>But that’s just half of the story. Just because a server claims to be api.guildwars2.com, doesn’t mean you can just take its word for it. Rather, public key certificates rely on a chain of trust, wherein another authority (CA) vouches for the server’s identify.</p>\n<p><em>Note: Humans have agreed to, and have put collective faith in, a select group of authorities. This is a (somewhat) manual process; this is what VeriSign is often known for.</em></p>\n<p><strong>How to break the Internet</strong></p>\n<p>Turns out, some certificate authorities are more “well known” than others (it’s all politics, man). In the case with the certificate installed on the server hosting <a href=\"https://api.guildwars2.com\">https://api.guildwars2.com</a>, the SSL certificate was issued by an authority that has given some community developers grief, and they have decide to ignore server trust completely.</p>\n<p>I’m going to guess that a good way to undermine ArenaNets’ support &amp; proliferation of a public REST API is to have 100s of community projects sharing code that talk to their service without any checks and balances. But there’s still a decent way to ensure security.</p>\n<p><strong>Pinning your hopes, dreams, and cert</strong></p>\n<p>As an alternative to blindly tossing away any attempt at security a server will throw back at your client, there is something called <em>cert pinning</em>.</p>\n<p>Once a server’s SSL certificate is made public, a client can copy the certificate’s “fingerprint” and validate it continues to match the cert signature on the server for every request made. This is known as <em>cert pinning</em>.</p>\n<p>If you are developing an application that will be using <em>cert pinning</em> still be certain that the certificate being pinned is legit; however, you’re no longer at the mercy of companies like Oracle, who might not include the certificate’s authority in their list of acceptable CA’s.</p>\n<p>Plus, <a href=\"http://blog.lumberlabs.com/2012/04/why-app-developers-should-care-about.html\">it’s all the rage</a>.</p>\n<p><strong>How to pin</strong></p>\n<p>If your preferred networking library doesn’t include cert pinning out-of-the-box, you can always hack it in to your project anyways. The site is a little slow, but <a href=\"https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning\">this page</a> has some pretty good examples for <a href=\"https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning#Examples_of_Pinning\">various platforms and languages</a>.</p>\n<p><em>end communication</em></p>","arenanet":false}]}