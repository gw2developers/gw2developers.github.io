{"title":"Simple C# Example - Rating Calculation","pubDate":"2013-06-04T18:18:40.000Z","guid":"http://forum-en.guildwars2.com/forum/community/api/Simple-C-Example-Rating-Calculation","comments":[{"pubDate":"2013-06-05T18:34:06.000Z","guid":"http://forum-en.guildwars2.com/forum/community/api/Simple-C-Example-Rating-Calculation/2160850","author":"DarkSpirit.7046","body":"\n<p>Nice job doing it the “man-ly” way – implementing your own parser and all.  You can breakup some parts into smaller functions/objects, guilty of that myself, but otherwise it looks fine to me.</p>","arenanet":false},{"pubDate":"2013-06-05T16:41:11.000Z","guid":"http://forum-en.guildwars2.com/forum/community/api/Simple-C-Example-Rating-Calculation/2160268","author":"Snowreap.5174","body":"\n<p>Ok, I’ve updated the original post with a newer version of code that has more comments.  But the added comments in the main program are not a substitute for understanding the underlying ideas — be sure to check these web pages for the necessary background information:<br>\n<a href=\"https://www.guildwars2.com/en/news/big-changes-coming-to-wvw-matchups/\">https://www.guildwars2.com/en/news/big-changes-coming-to-wvw-matchups/</a><br>\n<a href=\"http://www.guildwars2guru.com/news/884-the-math-behind-wvw-ratings/\">http://www.guildwars2guru.com/news/884-the-math-behind-wvw-ratings/</a><br>\n<a href=\"http://www.glicko.net/glicko/glicko2.pdf\">http://www.glicko.net/glicko/glicko2.pdf</a></p>\n<p>The JSON code is still relatively comment-free, aside from a reference to consult <a href=\"http://www.json.org/\">http://www.json.org/</a>.  The JSON syntax diagram shown there matches the JSON Tokenizer flow fairly well.</p>\n<p>-ken</p>","arenanet":false},{"pubDate":"2013-06-05T13:35:09.000Z","guid":"http://forum-en.guildwars2.com/forum/community/api/Simple-C-Example-Rating-Calculation/2159248","author":"Snowreap.5174","body":"\n<p>Oh, how standards change over time.  For me, spaghetti code has always been “code with a lot of gotos”.  In this code, the control flow is very straightforward: it flows from top to bottom, except for loops (which execute top to bottom).</p>\n<p>The complaint about a lack of comments is definitely warranted — it wasn’t originally written to be an example; I made it only for my own use, and as such it has all the comments I need.  If I get some time I’ll add more comments and upload again.</p>\n<p>The one part that is hard to understand is the mode 0 code that does the actual Glicko-2 rating calculation.  That part is pretty much a direct implementation of the Glicko-2 algorithm as documented here: <a href=\"http://www.glicko.net/glicko/glicko2.pdf\">http://www.glicko.net/glicko/glicko2.pdf</a>.</p>\n<p>The one bit that’s not covered in Glickman’s paper is ArenaNet’s method of calculating a score (represented by “s”), and their choice of a tau value.  That information is here: <a href=\"http://www.guildwars2guru.com/news/884-the-math-behind-wvw-ratings/\">http://www.guildwars2guru.com/news/884-the-math-behind-wvw-ratings/</a></p>\n<p>The Glicko-2 algorithm is impossible to understand just by looking at the code, but it compares fairly directly to the algorithm as described in Glickman’s paper.  The algorithm in the paper isn’t particularly easy to understand either so in that respect the code isn’t much worse.</p>\n<p>The rest of the modes perform statistical analysis using the Monte Carlo method, where you run a large number of random simulations and count how many of each of the outcomes you get.  The code for that is fairly straightforward, but assumes you know how GW2 matchups are done.  That information is found here: <a href=\"https://www.guildwars2.com/en/news/big-changes-coming-to-wvw-matchups/\">https://www.guildwars2.com/en/news/big-changes-coming-to-wvw-matchups/</a>.</p>\n<p>The JSON code has no comments at all but I’ve provided it only so that the program is complete and will compile — I hadn’t really intended it to be an example of a JSON parser, although if you know the basics of parsing (i.e. the difference between token parsing and lexical analysis), it can certainly serve that purpose.  The Value.GetValue() method contains the JSON parser, which consumes tokens from the Tokenizer (aka the Lexical Analyzer) via the Tokenizer.ReadToken() method.  If you’ve ever had to write your own parser &amp; lexer before, my implementation will be very clear but if you haven’t this code isn’t intended to teach you how.  I suspect most people doing ‘real work’ use tools like bison and flex to auto-generate parsers and lexers, rather than writing them by hand.</p>\n<p>-ken</p>","arenanet":false},{"pubDate":"2013-06-05T11:21:14.000Z","guid":"http://forum-en.guildwars2.com/forum/community/api/Simple-C-Example-Rating-Calculation/2158693","author":"Ruhrpottpatriot.7293","body":"\n<p>Also: Holy mother of spaghetti code<img src=\"/include/images/smilies/smile.png\"></p>","arenanet":false},{"pubDate":"2013-06-05T10:26:04.000Z","guid":"http://forum-en.guildwars2.com/forum/community/api/Simple-C-Example-Rating-Calculation/2158490","author":"Samuraiken.9581","body":"\n<p>Wow, thanks for that ;-)  The only thing that I would wish for in an “example” would be more comments (that was some pretty intense math being used, without an explanation of what was going on), but perhaps that’s more because I’m still new to the realm of JSON, etc, and have never used an API before in my life.  Well done, though!</p>","arenanet":false},{"pubDate":"2013-06-04T18:31:57.000Z","guid":"http://forum-en.guildwars2.com/forum/community/api/Simple-C-Example-Rating-Calculation/2154362","author":"Snowreap.5174","body":"\n<p>Example input (copied directly from the Leaderboard into Notepad):</p>\n<pre><code>1 \t Sanctum of Rall\t 2221.0640 \t 173.5353\t 0.7634\n2 \t Blackgate\t 2157.3918 \t 172.9866\t 0.7617\n3 \t Jade Quarry\t 2133.8296 \t 172.6257\t 0.7609\n4 \t Tarnished Coast\t 2007.7672 \t 172.4862\t 0.7597\n5 \t Dragonbrand\t 1962.8613 \t 172.8228\t 0.7632\n6 \t Fort Aspenwood\t 1960.8502 \t 172.6732\t 0.7589\n7 \t Maguuma\t 1823.5967 \t 174.9570\t 0.7723\n8 \t Kaineng\t 1782.2227 \t 175.9198\t 0.7935\n9 \t Yak's Bend\t 1745.0370 \t 173.6684\t 0.7620\n10 \t Sea of Sorrows\t 1716.8704 \t 180.1183\t 0.7736\n11 \t Crystal Desert\t 1586.2152 \t 176.1478\t 0.7682\n12 \t Ehmry Bay\t 1550.0354 \t 182.2718\t 0.7824\n13 \t Stormbluff Isle\t 1542.7919 \t 177.5990\t 0.7761\n14 \t Borlis Pass\t 1370.9421 \t 175.9778\t 0.7625\n15 \t Anvil Rock\t 1287.0150 \t 178.1011\t 0.7599\n16 \t Darkhaven\t 1272.9904 \t 175.5942\t 0.7668\n17 \t Sorrow's Furnace\t 1219.0934 \t 176.3832\t 0.7887\n18 \t Isle of Janthir\t 1215.2333 \t 175.5854\t 0.7830\n19 \t Gate of Madness\t 1132.9073 \t 174.1129\t 0.7631\n20 \t Devona's Rest\t 1063.6667 \t 173.5354\t 0.7681\n21 \t Northern Shiverpeaks\t 1047.4753 \t 173.0216\t 0.7570\n22 \t Henge of Denravi\t 1012.8758 \t 173.1538\t 0.7624\n23 \t Ferguson's Crossing\t 880.6989 \t 173.3165\t 0.7702\n24 \t Eredon Terrace\t 853.4559 \t 173.5841\t 0.7701\n</code></pre>\n<p>Example output (default mode 0):</p>\n<pre><code>1\tSanctum of Rall\t2218.4790\t172.9671\t0.7543\t-2.5850\t\n2\tBlackgate\t2150.2010\t171.9685\t0.7525\t-7.1908\t\n3\tJade Quarry\t2143.5600\t172.1516\t0.7518\t+9.7304\t\n4\tDragonbrand\t1994.6900\t184.8914\t0.7568\t+31.8287\t+1\n5\tTarnished Coast\t1981.9582\t178.2444\t0.7521\t-25.8090\t-1\n6\tFort Aspenwood\t1926.8598\t176.7001\t0.7513\t-33.9904\t\n7\tSea of Sorrows\t1785.7103\t188.2244\t0.7687\t+68.8399\t+3\n8\tMaguuma\t1758.3706\t181.6671\t0.7665\t-65.2261\t-1\n9\tKaineng\t1731.6037\t178.2449\t0.7853\t-50.6190\t-1\n10\tYak's Bend\t1731.4483\t174.5728\t0.7533\t-13.5887\t-1\n11\tCrystal Desert\t1652.0692\t179.5129\t0.7621\t+65.8540\t\n12\tStormbluff Isle\t1582.5558\t193.7547\t0.7708\t+39.7639\t+1\n13\tEhmry Bay\t1534.2980\t186.1550\t0.7745\t-15.7374\t-1\n14\tBorlis Pass\t1371.7103\t177.0362\t0.7540\t+0.7682\t\n15\tAnvil Rock\t1300.5133\t180.5061\t0.7521\t+13.4983\t\n16\tDarkhaven\t1236.0851\t179.5175\t0.7593\t-36.9053\t\n17\tSorrow's Furnace\t1199.3135\t188.6672\t0.7815\t-19.7799\t\n18\tIsle of Janthir\t1180.9801\t184.8205\t0.7758\t-34.2532\t\n19\tGate of Madness\t1131.7128\t174.7810\t0.7543\t-1.1945\t\n20\tNorthern Shiverpeaks\t1084.1215\t176.6530\t0.7495\t+36.6462\t+1\n21\tDevona's Rest\t1046.5120\t177.6124\t0.7598\t-17.1547\t-1\n22\tHenge of Denravi\t1015.3208\t178.1281\t0.7543\t+2.4450\t\n23\tFerguson's Crossing\t932.8182\t184.1240\t0.7643\t+52.1193\t\n24\tEredon Terrace\t869.3953\t184.4527\t0.7630\t+15.9394\t\n</code></pre>\n<p>Note that the output can be saved and used as input for a future run, because it is essentially in the same format (the rating change and rank change values are ignored on input).  In particular, the Mode 0 output is intended to then be used as input for Mode 1/2/3.</p>\n<p>-ken</p>","arenanet":false},{"pubDate":"2013-06-04T18:18:40.000Z","guid":"http://forum-en.guildwars2.com/forum/community/api/Simple-C-Example-Rating-Calculation/2154273","author":"Snowreap.5174","body":"\n<p>Here’s a simple example of a C# console-mode program that accesses data from the GW2 API.  This code was written for .NET 2.0.</p>\n<p>In the default mode of operation, it reads baseline rating information from standard input, gets the current scores from the GW2 API, then calculates new rating, deviation and volatility values for each server and outputs the new information.</p>\n<p>The program also has alternative modes (1, 2 and 3) that can be used to predict the likelihood of matchups under the new randomized matchup system.  In mode 1, it calculates the likelihood of getting a single server as one of your two opponents.  In mode 2, it calculates the likelihood of getting particular pairs of servers as your two opponents.  In mode 3, it calculates the likelihood of getting particular world/color combinations (i.e. not just the likelihoods of getting a particular pair of servers, but also the probabilities for each color combination).</p>\n<p>None of the alternative modes make use of the API, but I don’t feel like editing out that part of the code just to make this example more API-specific.</p>\n<p>The JSON parser implementation is based on earlier code I wrote for a Lua parser, so the “Value” class supports a lot of casting/comparison operators that JSON doesn’t really need.</p>\n<p>Note that by posting this code here, I am not giving up ownership of it (I am not making it “public domain”).  However, you may still freely look at it, copy it, or modify it.  But you may <strong>not</strong> slap a copyright notice on it then tell me (or others) to stop using it.</p>\n<p>-ken</p>","arenanet":false}]}